(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          land: topojson.feature(topology, land),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl = 'https://gist.githubusercontent.com/curran/13d30e855d48cdd6f22acdf0afe27286/raw/0635f14817ec634833bb904a47594cc2f5f9dbf8/worldcities_clean.csv';

  const row = d => {
    d.lat = +d.lat;
    d.lng = +d.lng;
    d.population = +d.population;
    return d;
  };

  const useCities = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();

  const Marks = ({
    worldAtlas: { land, interiors },
    cities,
    sizeScale,
    sizeValue
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map(feature => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      cities.map(d => {
        const [x, y] = projection([d.lng, d.lat]);
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) });
      })
    )
  );

  const width = 960;
  const height = 500;

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const cities = useCities();

    if (!worldAtlas || !cities) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const sizeValue = d => d.population;
    const maxRadius = 15;

    const sizeScale = d3.scaleSqrt()
      .domain([0, d3.max(cities, sizeValue)])
      .range([0, maxRadius]);
    
    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( Marks, {
          worldAtlas: worldAtlas, cities: cities, sizeScale: sizeScale, sizeValue: sizeValue })
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZVdvcmxkQXRsYXMuanMiLCJ1c2VDaXRpZXMuanMiLCJNYXJrcy5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganNvbiB9IGZyb20gJ2QzJztcbmltcG9ydCB7IGZlYXR1cmUsIG1lc2ggfSBmcm9tICd0b3BvanNvbic7XG5cbmNvbnN0IGpzb25VcmwgPSAnaHR0cHM6Ly91bnBrZy5jb20vd29ybGQtYXRsYXNAMi4wLjIvY291bnRyaWVzLTUwbS5qc29uJztcblxuZXhwb3J0IGNvbnN0IHVzZVdvcmxkQXRsYXMgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAganNvbihqc29uVXJsKS50aGVuKHRvcG9sb2d5ID0+IHtcbiAgICAgIGNvbnN0IHsgY291bnRyaWVzLCBsYW5kIH0gPSB0b3BvbG9neS5vYmplY3RzO1xuICAgICAgc2V0RGF0YSh7XG4gICAgICAgIGxhbmQ6IGZlYXR1cmUodG9wb2xvZ3ksIGxhbmQpLFxuICAgICAgICBpbnRlcmlvcnM6IG1lc2godG9wb2xvZ3ksIGNvdW50cmllcywgKGEsIGIpID0+IGEgIT09IGIpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3YgfSBmcm9tICdkMyc7XG5cbmNvbnN0IGNzdlVybCA9ICdodHRwczovL2dpc3QuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2N1cnJhbi8xM2QzMGU4NTVkNDhjZGQ2ZjIyYWNkZjBhZmUyNzI4Ni9yYXcvMDYzNWYxNDgxN2VjNjM0ODMzYmI5MDRhNDc1OTRjYzJmNWY5ZGJmOC93b3JsZGNpdGllc19jbGVhbi5jc3YnO1xuXG5jb25zdCByb3cgPSBkID0+IHtcbiAgZC5sYXQgPSArZC5sYXQ7XG4gIGQubG5nID0gK2QubG5nO1xuICBkLnBvcHVsYXRpb24gPSArZC5wb3B1bGF0aW9uO1xuICByZXR1cm4gZDtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VDaXRpZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY3N2KGNzdlVybCwgcm93KS50aGVuKHNldERhdGEpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiaW1wb3J0IHsgZ2VvTmF0dXJhbEVhcnRoMSwgZ2VvUGF0aCwgZ2VvR3JhdGljdWxlIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBwcm9qZWN0aW9uID0gZ2VvTmF0dXJhbEVhcnRoMSgpO1xuY29uc3QgcGF0aCA9IGdlb1BhdGgocHJvamVjdGlvbik7XG5jb25zdCBncmF0aWN1bGUgPSBnZW9HcmF0aWN1bGUoKTtcblxuZXhwb3J0IGNvbnN0IE1hcmtzID0gKHtcbiAgd29ybGRBdGxhczogeyBsYW5kLCBpbnRlcmlvcnMgfSxcbiAgY2l0aWVzLFxuICBzaXplU2NhbGUsXG4gIHNpemVWYWx1ZVxufSkgPT4gKFxuICA8ZyBjbGFzc05hbWU9XCJtYXJrc1wiPlxuICAgIDxwYXRoIGNsYXNzTmFtZT1cInNwaGVyZVwiIGQ9e3BhdGgoeyB0eXBlOiAnU3BoZXJlJyB9KX0gLz5cbiAgICA8cGF0aCBjbGFzc05hbWU9XCJncmF0aWN1bGVzXCIgZD17cGF0aChncmF0aWN1bGUoKSl9IC8+XG4gICAge2xhbmQuZmVhdHVyZXMubWFwKGZlYXR1cmUgPT4gKFxuICAgICAgPHBhdGggY2xhc3NOYW1lPVwibGFuZFwiIGQ9e3BhdGgoZmVhdHVyZSl9IC8+XG4gICAgKSl9XG4gICAgPHBhdGggY2xhc3NOYW1lPVwiaW50ZXJpb3JzXCIgZD17cGF0aChpbnRlcmlvcnMpfSAvPlxuICAgIHtjaXRpZXMubWFwKGQgPT4ge1xuICAgICAgY29uc3QgW3gsIHldID0gcHJvamVjdGlvbihbZC5sbmcsIGQubGF0XSk7XG4gICAgICByZXR1cm4gPGNpcmNsZSBjeD17eH0gY3k9e3l9IHI9e3NpemVTY2FsZShzaXplVmFsdWUoZCkpfSAvPjtcbiAgICB9KX1cbiAgPC9nPlxuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgIFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgc2NhbGVTcXJ0LCBtYXggfSBmcm9tICdkMyc7XG5pbXBvcnQgeyB1c2VXb3JsZEF0bGFzIH0gZnJvbSAnLi91c2VXb3JsZEF0bGFzJztcbmltcG9ydCB7IHVzZUNpdGllcyB9IGZyb20gJy4vdXNlQ2l0aWVzJztcbmltcG9ydCB7IE1hcmtzIH0gZnJvbSAnLi9NYXJrcyc7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IHdvcmxkQXRsYXMgPSB1c2VXb3JsZEF0bGFzKCk7XG4gIGNvbnN0IGNpdGllcyA9IHVzZUNpdGllcygpO1xuXG4gIGlmICghd29ybGRBdGxhcyB8fCAhY2l0aWVzKSB7XG4gICAgcmV0dXJuIDxwcmU+TG9hZGluZy4uLjwvcHJlPjtcbiAgfVxuXG4gIGNvbnN0IHNpemVWYWx1ZSA9IGQgPT4gZC5wb3B1bGF0aW9uO1xuICBjb25zdCBtYXhSYWRpdXMgPSAxNTtcblxuICBjb25zdCBzaXplU2NhbGUgPSBzY2FsZVNxcnQoKVxuICAgIC5kb21haW4oWzAsIG1heChjaXRpZXMsIHNpemVWYWx1ZSldKVxuICAgIC5yYW5nZShbMCwgbWF4UmFkaXVzXSk7XG4gIFxuICByZXR1cm4gKFxuICAgIDxzdmcgd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0+XG4gICAgICA8TWFya3NcbiAgICAgICAgd29ybGRBdGxhcz17d29ybGRBdGxhc31cbiAgICAgICAgY2l0aWVzPXtjaXRpZXN9XG4gICAgICAgIHNpemVTY2FsZT17c2l6ZVNjYWxlfVxuICAgICAgICBzaXplVmFsdWU9e3NpemVWYWx1ZX1cbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpO1xuUmVhY3RET00ucmVuZGVyKDxBcHAgLz4sIHJvb3RFbGVtZW50KTtcbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImpzb24iLCJmZWF0dXJlIiwibWVzaCIsImNzdiIsImdlb05hdHVyYWxFYXJ0aDEiLCJnZW9QYXRoIiwiZ2VvR3JhdGljdWxlIiwiUmVhY3QiLCJzY2FsZVNxcnQiLCJtYXgiXSwibWFwcGluZ3MiOiI7Ozs7OztFQUlBLE1BQU0sT0FBTyxHQUFHLHdEQUF3RCxDQUFDOztBQUV6RSxFQUFPLE1BQU0sYUFBYSxHQUFHLE1BQU07SUFDakMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBR0EsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7SUFFdkNDLGlCQUFTLENBQUMsTUFBTTtNQUNkQyxPQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSTtRQUM3QixNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDN0MsT0FBTyxDQUFDO1VBQ04sSUFBSSxFQUFFQyxnQkFBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7VUFDN0IsU0FBUyxFQUFFQyxhQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMs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